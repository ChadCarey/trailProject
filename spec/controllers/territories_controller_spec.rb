require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TerritoriesController, :type => :controller do

  

  before(:suite) do
    DatabaseCleaner.clean_with(:truncation)
  end

  let(:valid_attributes) {
    FactoryGirl.attributes_for(:territory)
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:territory, name:nil, latitude: nil, longitude: nil, zoom:nil, )
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TerritorysController. Be sure to keep this updated too.
  let(:valid_session) { { username: "jimmy", user_type: 'admin', user_id: 1 } }

  # GET
  describe "GET" do

    before(:each) do
      DatabaseCleaner.strategy = :truncation
      DatabaseCleaner.start
      DatabaseCleaner.clean
    end

    context "index" do
      it "assigns all territories as @territories" do
        territory = Territory.create! valid_attributes
        get :index, {}, valid_session
        expect(assigns(:territories)).to eq([territory])
      end
    end

    describe "show" do
      it "assigns the requested territory as @territory" do
        territory = Territory.create! valid_attributes
        get :show, {:id => territory.to_param}, valid_session
        expect(assigns(:territory)).to eq(territory)
      end
    end

    describe "new" do
      it "assigns a new territory as @territory" do
        get :new, {}, valid_session
        expect(assigns(:territory)).to be_a_new(Territory)
      end
    end

    describe "edit" do
      it "assigns the requested territory as @territory" do
        territory = Territory.create! valid_attributes
        get :edit, {:id => territory.to_param}, valid_session
        expect(assigns(:territory)).to eq(territory)
      end
    end

    describe "json" do
      it "returns a valid json object" do
        subject = FactoryGirl.create(:territory)
        json = get(:getJson, {}, valid_session)
        expect(json).to_not be_nil;
      end

      it "returns a valid json object when given an id" do
        subject = FactoryGirl.create(:territory) 
        json = get(:getJson, {id: subject.area_id}, valid_session)
        expect(json).to_not be_nil;
      end

    end

  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Territory" do
        expect {
          post :create, {:territory => valid_attributes}, valid_session
        }.to change(Territory, :count).by(1)
      end

      it "assigns a newly created territory as @territory" do
        post :create, {:territory => valid_attributes}, valid_session
        expect(assigns(:territory)).to be_a(Territory)
        expect(assigns(:territory)).to be_persisted
      end

      it "redirects to the created territory" do
        post :create, {:territory => valid_attributes}, valid_session
        expect(response).to redirect_to(Territory.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved territory as @territory" do
        post :create, {:territory => invalid_attributes}, valid_session
        expect(assigns(:territory)).to be_a_new(Territory)
      end

      it "re-renders the 'new' template" do
        post :create, {:territory => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        FactoryGirl.attributes_for(:territory, name:"It's Jimmy!")
      }

      it "updates the requested territory" do
        territory = Territory.create! valid_attributes
        put :update, {:id => territory.to_param, :territory => new_attributes}, valid_session
        territory.reload
        expect(territory.name).to eq("It's Jimmy!")
      end

      it "assigns the requested territory as @territory" do
        territory = Territory.create! valid_attributes
        put :update, {:id => territory.to_param, :territory => valid_attributes}, valid_session
        expect(assigns(:territory)).to eq(territory)
      end

      it "redirects to the territory" do
        territory = Territory.create! valid_attributes
        put :update, {:id => territory.to_param, :territory => valid_attributes}, valid_session
        expect(response).to redirect_to(territory)
      end
    end

    describe "with invalid params" do
      it "assigns the territory as @territory" do
        territory = Territory.create! valid_attributes
        put :update, {:id => territory.to_param, :territory => invalid_attributes}, valid_session
        expect(assigns(:territory)).to eq(territory)
      end

      it "re-renders the 'edit' template" do
        territory = Territory.create! valid_attributes
        put :update, {:id => territory.to_param, :territory => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested territory" do
      territory = Territory.create! valid_attributes
      expect {
        delete :destroy, {:id => territory.to_param}, valid_session
      }.to change(Territory, :count).by(-1)
    end

    it "redirects to the territories list" do
      territory = Territory.create! valid_attributes
      delete :destroy, {:id => territory.to_param}, valid_session
      expect(response).to redirect_to(territories_url)
    end
  end
end
